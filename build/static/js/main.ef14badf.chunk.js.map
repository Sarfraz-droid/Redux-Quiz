{"version":3,"sources":["Quiz.js","Home.js","Score.js","App.js","reducer/counter.js","reducer/allAnswers.js","reducer/allReducer.js","serviceWorker.js","index.js"],"names":["Quiz","history","useHistory","dispatch","useDispatch","useState","answer","setanswer","counter","useSelector","state","len","allans","MCQ","length","className","Question","Options","map","option","index","style","borderColor","color","onClick","type","actualAnswer","Answer","answerchange","push","Home","Score","score","total","setTotal","final","setScore","useEffect","q","App","path","counterReducer","action","allAnswers","allreducers","combineReducers","Boolean","window","location","hostname","match","store","createStore","allReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef14badf.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\nimport MCQ from \"./json/MCQ.json\"\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Quiz() {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch()\r\n\r\n    const [answer, setanswer] = useState(-1);\r\n\r\n    const counter = useSelector((state) => state.counter)\r\n    const allAns = useSelector((state) => state.allans)\r\n\r\n    const len = MCQ.length;\r\n\r\n    // const [allAnswers, setallAnswers] = useState({});\r\n\r\n    const answerchange = (index) => {\r\n        setanswer(index);\r\n\r\n        dispatch({type: \"ADD_ANSWER\", answer: index, actualAnswer: MCQ[index].Answer, counter: counter});\r\n\r\n        // setallAnswers({...allAnswers, [counter]: {\r\n        //     answer : index,\r\n        //     actualAnswer : MCQ[index].Answer\r\n        // }});\r\n\r\n        // console.log(allAnswers);\r\n    }\r\n\r\n  return (\r\n    <div className=\"Quiz-question\">\r\n      <div className=\"QuizSection\">\r\n        <h3>{counter+1}. {MCQ[counter].Question}</h3>\r\n        <div className=\"options\">\r\n            {MCQ[counter].Options.map((option,index)=>{\r\n                return (\r\n                \r\n                <div className=\"MCQ\" style={\r\n                    {\r\n                        borderColor: answer === index ? '#00ADB5': \"transparent\",\r\n                        color: answer === index ? '#00ADB5': \"black\", \r\n                    }\r\n                } \r\n                onClick = {() => answerchange(index)}>\r\n                    {option}\r\n                </div>);\r\n            })}\r\n\r\n        </div>\r\n        <div className=\"buttons\">\r\n            {counter > 0? <button className=\"Prev\" onClick={() =>{ dispatch({type: \"DECREMENT\"}); setanswer(-1)}}>Prev</button> : <button className=\"Prev\" onClick={() => history.push(\"/\")}>Go Home</button>}\r\n            {counter < (len-1)? <button className=\"Next\" onClick={() => {dispatch({type: \"INCREMENT\"}); setanswer(-1)}}>Next</button>: <button className=\"Next\" onClick={() => history.push(\"/Score\")}>Submit</button>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","import React from 'react'\r\nimport \"./scss/home.scss\"\r\n\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nfunction Home() {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"quiz-home\">\r\n                <h1>Welcome to Quiz</h1>\r\n                <button onClick={() => history.push(\"/quiz\")}>\r\n                    Start Quiz\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React,{useState,useEffect} from 'react'\r\n\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport MCQ from \"./json/MCQ.json\";\r\n\r\nfunction Score() {\r\n\r\n    const score = useSelector(state => state.allans);\r\n\r\n    const [total, setTotal] = useState(0);\r\n    const [final, setScore] = useState(0);\r\n    useEffect(() =>\r\n    {\r\n        for(let q in score) {\r\n            if(q.answer === q.actualAnswer)\r\n            {\r\n                setScore(final + 1);\r\n            }\r\n            setTotal(total + 1);\r\n        }\r\n    },[]);\r\n\r\n    return (\r\n        <div className=\"score\">\r\n            <div className=\"container\">\r\n                <h1>\r\n                    You Scored\r\n                </h1>\r\n                <p>\r\n                    {final}/{MCQ.length}\r\n                </p>\r\n\r\n                <div>\r\n                    <ul>\r\n                        <li>\r\n                            {total} Questions Attemped\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score\r\n","import React from 'react';\nimport {useSelector} from 'react-redux'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Quiz from \"./Quiz\"\nimport Home from \"./Home\"\nimport Score from \"./Score\"\n\nfunction App() {\n  const counter = useSelector(state => state.counter);\n  \n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/quiz\">\n            <Quiz />\n          </Route>\n          <Route path=\"/score\">\n            <Score />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const counterReducer = (state = 0 ,action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return state + 1;\r\n        case 'DECREMENT':\r\n            return state - 1;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default counterReducer;","const allAnswers = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_ANSWER':\r\n            return {\r\n                ...state,\r\n                [action.counter]:{\r\n                    answer: action.answer,\r\n                    actualAnswer: action.actualAnswer,\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default allAnswers;","import { combineReducers } from 'redux'\r\nimport counterReducer from \"./counter\";\r\nimport allAnswers from './allAnswers';\r\n\r\nconst allreducers = combineReducers({\r\n    counter: counterReducer,\r\n    allans: allAnswers\r\n}); \r\n\r\nexport default allreducers;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider} from 'react-redux';\nimport { createStore } from 'redux'\nimport allReducer from \"./reducer/allReducer\"\nimport * as serviceWorker from './serviceWorker';\nimport counter from \"./reducer/counter\"\n\n\nlet store = createStore( allReducer , window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}